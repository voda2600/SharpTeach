@page "/stack"
@using OnlineCompiler.Shared
@inject HttpClient _http
@using Microsoft.AspNetCore.Components
@inject IStringLocalizer<Localization> _loc

<PageTitle>@_loc["OnlineCsharpCompiler"]</PageTitle>

<div class="container my-5">
    <div class="text-center">
        <h2>Стек (Stack)</h2>
    </div>
    <p>Класс Stack представляет коллекцию, которая использует алгоритм LIFO ("последний вошел - первый вышел"). При такой организации каждый следующий добавленный элемент помещается поверх предыдущего. Извлечение из коллекции происходит в обратном порядке - извлекается тот элемент, который находится выше всех в стеке.
    </p>
    <p>Стек - довольно часто встречаемая структура данных в реальной жизни. Банальные примеры стеков - стопка книг или тарелок, где каждую новую книгу или тарелку помещают поверх предыдущей. А извлекают из этой стопки книги/тарелки в обратном порядке - сначала самую верхнюю и так далее. Другой пример - одежда: допустим, человек выходит на улицу в зимнюю погоду и для этого сначала одевает майку, потом рубашку, затем свитер, и в конце куртку. Когда человек снимает с себя одежду - он делает это в обратном порядке: сначала снимает куртку, потом свитер и так далее.
    </p>

    <p>Вот визуальное представление внутренней структуры Стек:</p>
    <img src="8.jpg" height="20%" width="30%" alt="Визуальное представление внутренней структуры стек">

    <h3>В классе Stack можно выделить следующие методы:</h3>
    <ul>
        <li>Clear: очищает стек</li>
        <li>Contains: проверяет наличие в стеке элемента и возвращает true при его наличии</li>
        <li>Push: добавляет элемент в стек в верхушку стека</li>
        <li>Pop: извлекает и возвращает первый элемент из стека</li>
        <li>Peek: просто возвращает первый элемент из стека без его удаления</li>
        <li>bool TryPop(out T result): удаляет из стека первый элемент и передает его в переменную result, возвращает true, если очередь не пуста и элемент успешно получен.</li>
        <li>bool TryPeek(out T result): передает в переменную result первый элемент стека без его извлечения, возвращает true, если элемент успешно получен.</li>
    </ul>
</div>

@if (_userExecuted)
{
    <button class="btn btn-warning" @onclick="ToggleCode">@if (_showCode) {<text>Скрыть полный код разработчиков</text>} else {<text>Показать полный код разработчиков</text>}</button>
    if (_showCode)
    {
        <p></p>
        <CodeEditor @bind-Code="_innerCode">@TemplateStack.StackCode
        </CodeEditor>
        <br/>

        }
}                                                                                                               

    <p></p>
<p>Пишите свой код тут: </p>
<CodeEditor @bind-Code="_userInnerCode">@TemplateStack.UserStackCode</CodeEditor>
<br />
<button class="btn btn-primary @(ExecuteButtonDisabled?"disabled":"")" @onclick="@(async () => { _userExecuted = true; await UserExecuteCode(); })">@_loc["Execute"]</button>

<br />
@if (_executionInfo != null)
{
    <text>&nbsp;</text>
    switch (_executionInfo.Status)
    {
        case ExecutionInfo.ExecutionStatus.Preparing:
            {
                <status-indicator pulse />
                <label>@_loc["Preparing"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Compiling:
            {
                <status-indicator active />
                <label>@_loc["Compiling"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.CompilationError:
            {
                <status-indicator negative />
                <label>@_loc["CompilationError"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Running:
            {
                <status-indicator active pulse />
                <label>@_loc["Running"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Finished:
            {
                <status-indicator positive />
                <label>@_loc["Finished"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.WithWarning:
        {
            <status-indicator positive />
            <label>Выполнено с замечаниями</label>
            break;
        }
    }
    <br />
    if (OutputSplitByNewLines != null)
    {
        @foreach (string line in OutputSplitByNewLines)
        {
            <p>@line</p>
        }
        <p>Время: @_executionInfo.CompilerTime мс</p>
    }
     if (_executionInfo != null && _executionInfo.Hints.Count > 0)
    {
        <br />
        int addc = 0;
        int removec = 0;
        int findc = 0;
        <div class="container">
        <div class="row row-cols-1" style="margin-right: 10px; width: 350px; float:left;">
            @if (_executionInfo.Hints.Any(x => x.Contains(addStr)) && showAdd)
            {
                <button style="margin-bottom: 7px" class="btn btn-info" @onclick="AddCode"><text>Показать подсказку по методу Add</text></button>
            }
            @if (_executionInfo.Hints.Any(x => x.Contains(removeStr)) && showRemove)
            {
                <button style="margin-bottom: 7px" class="btn btn-info" @onclick="RemoveCode"><text>Показать подсказку по методу Remove</text></button>
            }
            @if (_executionInfo.Hints.Any(x => x.Contains(findStr)) && showFind)
            {
                <button style="margin-bottom: 7px" class="btn btn-info" @onclick="FindCode"><text>Показать подсказку по методу Find</text></button>
            }
        </div>
         <div class="row row-cols-1" style="margin-left: 10px;">

        @foreach (string line in _executionInfo.Hints)
        {
            if (line.Contains(addStr) && addc < AddCount)
            {
                addc++;
                <p>@line</p>
                if (addc >= _executionInfo.Hints.Count(x => x.Contains(addStr)))
                {
                    showAdd = false;
                }
            }
            else if (line.Contains(removeStr) && removec < RemoveCount)
            {
                removec++;
                <p>@line</p>
                if (removec >= _executionInfo.Hints.Count(x => x.Contains(removeStr)))
                {
                    showRemove = false;
                }
            }
            else if (line.Contains(findStr) && findc < FindCount)
            {
                findc++;
                <p>@line</p>
                if (findc >= _executionInfo.Hints.Count(x => x.Contains(findStr)))
                {
                    showFind = false;
                }
            }
        }
        </div>
        </div>
    }
}


@code
{
    string addStr = "Push";
    string removeStr = "Pop";
    string findStr = "Find";
    
    int AddCount = 0;
    int RemoveCount = 0;
    int FindCount = 0;
    
    bool showAdd = true;
    bool showRemove = true;
    bool showFind = true;
    
    void AddCode()
    {
        AddCount++;
    }
    
    void RemoveCode()
    {
        RemoveCount++;
    }
    
    void FindCode()
    {
        FindCount++;
    }

    bool _showCode;

    void ToggleCode()
    {
        _showCode = !_showCode;
    }
    bool _userExecuted;
    private string? _innerCode;
    private string? _userInnerCode;

    private bool ExecuteButtonDisabled = false;
    
    /// <summary>
    /// Information about code execution operation
    /// </summary>
    private ExecutionInfo? _executionInfo;
    /// <summary>
    /// Output from ExecutionInfo, split by Environment.NewLine
    /// </summary>
    private IEnumerable<string>? OutputSplitByNewLines => _executionInfo?.Output.Split(Environment.NewLine);

    private async Task UserExecuteCode()
    {
        if (_userInnerCode != null && !ExecuteButtonDisabled)
        {
            ExecuteButtonDisabled = true;
            _executionInfo = new ExecutionInfo(ExecutionInfo.ExecutionStatus.Running, "");
            var userresponse = await _http.PostAsJsonAsync("Execution/Stack", value: _userInnerCode);
            ExecutionInfo? result = await userresponse.Content.ReadFromJsonAsync<ExecutionInfo>();
            _executionInfo = result;
            ExecuteButtonDisabled = false;
        }
    }
}