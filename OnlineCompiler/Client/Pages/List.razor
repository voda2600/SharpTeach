@page "/list"
@using OnlineCompiler.Shared
@inject HttpClient _http
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@inject IStringLocalizer<Localization> _loc

<PageTitle>@_loc["OnlineCsharpCompiler"]</PageTitle>

<div class="container mt-4">
    <div class="text-center">
        <h2>Лист(List)</h2>
    </div>
    <p>
        Класс List из пространства имен System.Collections.Generic
        представляет простейший список однотипных объектов. Класс List типизируется типом, объекты которого будут хранится в списке.
    </p>
    <p>В отличие от массива, предоставляет набор методов, облегчающих работу, таких как добавление новых элементов</p>

    <p>Визуальное представление внутренней структуры списка:</p>
    <img src="1.jpg" height="600px" width="700px" alt="Визуальное представление внутренней структуры списка">

    <h4 class="mt-4">Основные операции со связными списками</h4>
    <ul>
        <li>Add – вставка элемента.</li>
        <li>Contains(T) – проверка наличия элемента.</li>
        <li>Finf – поиск указанного элемента.</li>
        <li>Remove – удаление элемента.</li>
        <li>Sort – сортировка.</li>
        <li>IndexOf – поиск индекса входного значения.</li>
    </ul>
</div>

<AuthorizeView>
    <Authorized>
        @{
            username = context.User.Identity?.Name;
            ExecuteButtonDisabled = false;
        }
    </Authorized>
    <NotAuthorized>
        @{
            ExecuteButtonDisabled = true;
        }
    </NotAuthorized>
</AuthorizeView>

@if (!string.IsNullOrEmpty(username) && !isCodeLoaded)
{
    <button class="btn btn-primary" @onclick="GetUserCode">
        <text>Загрузить сохранённую реализацию</text>
    </button>
    <br/>
    isCodeLoaded = true;
}

@if (_userExecuted)
{
    <button class="btn btn-warning" @onclick="ToggleCode">
        @if (_showCode)
        {
            <text>Скрыть полный код разработчиков</text>
        }
        else
        {
            <text>Показать полный код разработчиков</text>
        }
    </button>
    if (_showCode)
    {
        <p></p>
        <CodeEditor @bind-Code="_innerCode">
            @TemplateList.ListCode
        </CodeEditor>
        <br/>
    }
}

<p></p>
<p>Пишите свой код тут: </p>
<CodeEditor @bind-Code="_userInnerCode">@_userInnerCode</CodeEditor>
<br/>
<button class="btn btn-primary @(ExecuteButtonDisabled ? "disabled" : "")" @onclick="@(async () => { _userExecuted = true; await UserExecuteCode(); })">@_loc["Execute"]</button>

<br/>
@if (_executionInfo != null)
{
    switch (_executionInfo.Status)
    {
        case ExecutionInfo.ExecutionStatus.Preparing:
        {
            <status-indicator pulse/>
            <label>@_loc["Preparing"]</label>
            break;
        }
        case ExecutionInfo.ExecutionStatus.Compiling:
        {
            <status-indicator active/>
            <label>@_loc["Compiling"]</label>
            break;
        }
        case ExecutionInfo.ExecutionStatus.CompilationError:
        {
            <status-indicator negative/>
            <label>@_loc["CompilationError"]</label>
            break;
        }
        case ExecutionInfo.ExecutionStatus.Running:
        {
            <status-indicator active pulse/>
            <label>@_loc["Running"]</label>
            break;
        }
        case ExecutionInfo.ExecutionStatus.Finished:
        {
            <status-indicator positive/>
            <label>@_loc["Finished"]</label>
            break;
        }
        case ExecutionInfo.ExecutionStatus.WithWarning:
        {
            <status-indicator positive/>
            <label>Выполнено с замечаниями</label>
            break;
        }
    }
    if (OutputSplitByNewLines != null)
    {
        @foreach (string line in OutputSplitByNewLines)
        {
            <p>@line</p>
        }
        <p>Время вставки: @_executionInfo.AddTime tick</p>
        <p>Время поиска: @_executionInfo.FindTime tick</p>
        <p>Время удаления: @_executionInfo.DeleteTime tick</p>
    }
    if (_executionInfo != null && _executionInfo.Hints.Count > 0)
    {
        <br/>
        int addc = 0;
        int removec = 0;
        int findc = 0;
        <div class="container">
            <div class="row row-cols-1" style="margin-right: 10px; width: 350px; float:left;">
                @if (_executionInfo.Hints.Any(x => x.Contains(addStr)) && showAdd)
                {
                    <button style="margin-bottom: 7px" class="btn btn-info" @onclick="AddCode">
                        <text>Показать подсказку по методу Add</text>
                    </button>
                }
                @if (_executionInfo.Hints.Any(x => x.Contains(removeStr)) && showRemove)
                {
                    <button style="margin-bottom: 7px" class="btn btn-info" @onclick="RemoveCode">
                        <text>Показать подсказку по методу Remove</text>
                    </button>
                }
                @if (_executionInfo.Hints.Any(x => x.Contains(findStr)) && showFind)
                {
                    <button style="margin-bottom: 7px" class="btn btn-info" @onclick="FindCode">
                        <text>Показать подсказку по методу Find</text>
                    </button>
                }
            </div>
            <div class="row row-cols-1" style="margin-left: 10px;">

                @foreach (string line in _executionInfo.Hints)
                {
                    if (line.Contains(addStr) && addc < AddCount)
                    {
                        addc++;
                        <p>@line</p>
                        if (addc >= _executionInfo.Hints.Count(x => x.Contains(addStr)))
                        {
                            showAdd = false;
                        }
                    }
                    else if (line.Contains(removeStr) && removec < RemoveCount)
                    {
                        removec++;
                        <p>@line</p>
                        if (removec >= _executionInfo.Hints.Count(x => x.Contains(removeStr)))
                        {
                            showRemove = false;
                        }
                    }
                    else if (line.Contains(findStr) && findc < FindCount)
                    {
                        findc++;
                        <p>@line</p>
                        if (findc >= _executionInfo.Hints.Count(x => x.Contains(findStr)))
                        {
                            showFind = false;
                        }
                    }
                }
            </div>
        </div>
    }
}


@code
{
    string username = "";
    bool isCodeLoaded = false;
    string addStr = "Add";
    string removeStr = "Remove";
    string findStr = "Find";

    int AddCount = 0;
    int RemoveCount = 0;
    int FindCount = 0;

    bool showAdd = true;
    bool showRemove = true;
    bool showFind = true;

    void AddCode()
    {
        AddCount++;
    }

    void RemoveCode()
    {
        RemoveCount++;
    }

    void FindCode()
    {
        FindCount++;
    }

    bool _showCode;

    void ToggleCode()
    {
        _showCode = !_showCode;
    }

    bool _userExecuted;
    private string? _innerCode;
    private string? _userInnerCode = TemplateList.UserListCode;

    private bool ExecuteButtonDisabled = false;

    /// <summary>
    /// Information about code execution operation
    /// </summary>
    private ExecutionInfo? _executionInfo;

    /// <summary>
    /// Output from ExecutionInfo, split by Environment.NewLine
    /// </summary>
    private IEnumerable<string>? OutputSplitByNewLines => _executionInfo?.Output.Split(Environment.NewLine);

    private async Task UserExecuteCode()
    {
        if (_userInnerCode != null && !ExecuteButtonDisabled)
        {
            ExecuteButtonDisabled = true;
            _executionInfo = new ExecutionInfo(ExecutionInfo.ExecutionStatus.Running, "");
            var data = new RequestData() {Code = _userInnerCode, Login = username};
            var userresponse = await _http.PostAsJsonAsync("Execution/List", data);
            ExecutionInfo? result = await userresponse.Content.ReadFromJsonAsync<ExecutionInfo>();
            _executionInfo = result;
            ExecuteButtonDisabled = false;
        }
    }

    private async Task GetUserCode()
    {
        ExecuteButtonDisabled = true;
        var userresponse1 = await _http.PostAsJsonAsync("Execution/GetCode/List", username);
        var result = await userresponse1.Content.ReadAsStringAsync();
        _userInnerCode = string.IsNullOrWhiteSpace(result) ? _userInnerCode : result;
        ExecuteButtonDisabled = false;
    }
}